## Toby Sanderson, 2018. Modified 2020 MSB
## Applies a selected amount of overscan based on current frame resolution.

import maya.cmds as cmds

"""
To Do: 
Check res against shot res / project res to see if shot may already have overscan on it. Important for bounding box option. 
Sort out the nuke filtering issue with extra pixels

"""



def calculateResAndPrescale(percentage,xRes,yRes,prescale):
    #res
    input = float("1."+str(percentage))
    new_xRes = xRes*input
    new_yRes = yRes*input   
    #prescale
    input = 1-(float("0."+str(percentage)))
    new_prescale = prescale*input
    """
    # Sort out the rounding issue somtime
    # WIP code
    preScaleAmount = int((currentWidth*newValues[2])-currentWidth)
    if (preScaleAmount % 2) == 0:
       print("Overscan is {0} pixels, an even number - setting to {0}".format(newValues[2]))
    else:
       roundedOverscan = newValues[2] + 1
       print("Overscan is {0} pixels. NOT an even number - rounding up to {1} to aid filtering in Nuke.".format(preScaleAmount, roundedOverscan))
       preScaleAmount = newValues[2] + 1
    """
    return(int(new_xRes),int(new_yRes),new_prescale)
    

def overscanPicker():
    currentWidth = cmds.getAttr("defaultResolution.width")
    currentHeight = cmds.getAttr("defaultResolution.height")
    preScaleAmount = 1 
    warning = False
    bb = ""
    # Get the renderable camera
    renderCam = []
    allCams = cmds.ls(type = "camera")
    for cam in allCams:
        if cmds.getAttr(cam+".renderable") == 1:
            renderCam.append(cam)
    # Ensure only one render camera
    if len(renderCam) != 1:
        cmds.confirmDialog(m="Multiple cameras set to render.\nSelect one and try again...", b="OK", icn="warning", ma="center", t="Overscan Picker")
        return  
    # Choose overscan amount
    theCamera = str(renderCam[0])
    currentPrescale = cmds.getAttr(theCamera+".preScale")
    if currentPrescale != 1.0:
        warning = True
        
    print "Choose overscan amount..."

    # Depreciated the change-res setup as the maths looked shonky (10% became 1.11 on prescale) and BB works better. 
    #isBoundingBox = cmds.confirmDialog(m="Change resolution and preScale or put overscan in exr bounding box?", b=["Bounding box", "Change res and preScale"], t="Overscan method")
    overscanAmount = cmds.confirmDialog(m="Choose the amount of overscan you'd like...", b=["10%", "15%", "20%", "Arbitrary", "Cancel"], t="Overscan Picker")
    disableCamShakeAttrs = cmds.confirmDialog(m="Disable filmBack shake keys?\nIf overscan is for 2D camerashake choose Yes.", b=["Yes", "No"], t="Disable camera shake?")
    if disableCamShakeAttrs == "Yes":
        print "Disabling camera shake attrs for: "+ str(theCamera)
        cmds.setAttr(theCamera+".shakeEnabled", 0)

    #This could be less convoluted, but it works:
    if overscanAmount == "10%":
        percentage = 10
        newValues = calculateResAndPrescale(percentage,currentWidth,currentHeight,currentPrescale)
        print newValues
    elif overscanAmount == "15%":
        percentage = 15
        newValues = calculateResAndPrescale(percentage,currentWidth,currentHeight,currentPrescale)
        print newValues
    elif overscanAmount == "20%":
        percentage = 20
        newValues = calculateResAndPrescale(percentage,currentWidth,currentHeight,currentPrescale)
        print newValues
    elif overscanAmount == "Arbitrary":
        result = cmds.promptDialog(title='Arbitrary #',message='Percent: ',button=['OK', 'Cancel'],defaultButton='OK',dismissString='Cancel')
        if result == 'OK':
            percentage = cmds.promptDialog(query=True, text=True)
            print percentage+"% overscan."
            newValues = calculateResAndPrescale(percentage,currentWidth,currentHeight,currentPrescale)
            print newValues
            
    # Free the aspectLock                        
    cmds.setAttr("defaultResolution.aspectLock",False)
    # forcing this as a quick way to eliminate the 'isBoundingBox' dialogue that returns change res etc (keeping it all in incase comp want extra pixels)
    isBoundingBox = "Bounding box"
    if isBoundingBox == "Change res and preScale":        
        
        #Force pixel aspect to one        
        pixelAspect = 1.0
        cmds.setAttr("defaultResolution.aspectLock", 0) # unlocks ratio

        #Calculates the device aspect since pixel aspect isn't an actual attribute.
        device_aspect = float(int(currentWidth) * pixelAspect)/float(int(currentHeight))
        #Set the Lock Device Aspect Ratio. IMPORTANT!
        #If you don't make this 1 it won't work.
        cmds.setAttr("defaultResolution.lockDeviceAspectRatio", 1)
        
        #Set width, height, and aspect ratio.
        cmds.setAttr("defaultResolution.width", newValues[0])
        cmds.setAttr("defaultResolution.height", newValues[1])
        cmds.setAttr("defaultResolution.deviceAspectRatio", device_aspect)
        cmds.setAttr("defaultResolution.aspectLock", 1) # locks ratio
        cmds.setAttr(theCamera+".preScale", (newValues[2]))
        newPrescale = cmds.getAttr(theCamera+".preScale")        
        # Remove any arnold overscan from other tests
        print "Forcing Arnold Bounding Box overscan value to 0"
        cmds.setAttr( 'defaultArnoldRenderOptions.outputOverscan', 0, type='string' )
        print "Overscan applied - new resolution: {} x {}. Prescale: {}\n".format(str(newValues[0]), str(newValues[1]), (round(newValues[2], 3))),                      
           
    # The bounding box way
    if isBoundingBox == "Bounding box":
        print "Setting overscan as bounding box for exr."
        currentPrescale = cmds.getAttr(theCamera+".preScale")
        if currentPrescale != 1.0:
            warning = True 
            bb = "Arnold boundingBox "

        arnoldTranslator = cmds.getAttr( 'defaultArnoldDriver.ai_translator')
        if arnoldTranslator != "exr":
            cmds.error("Output format is not exr, can't set bounding box overscan.")                                   

        cmds.setAttr( 'defaultArnoldRenderOptions.outputOverscan', str(percentage)+ "%", type='string' )

    if overscanAmount == "Cancel":
        print "No overscan applied, resolution is {} x {}\n".format(newValues[0], newValues[1]),

    if warning == True:
        cmds.warning( "CAUTION: Prescale is not 1.0. applying {}prescale to existing prescale: ".format(bb)+str(currentPrescale))        
           
# END
#msb090420
#overscanPicker()
