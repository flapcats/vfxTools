# track any point 
    

"""

For Shelf:
import trackAnyPoint
trackAnyPoint.trackAnyPoint()

Usage:
* Select the tracked camera
  It will create a 'scale_me' camera + locator called 'pointInWorld'
* Move the 'pointInWorld locator over the point you want to track. Get it as accurate as possible, ideally use 2D pan/zoom.
* Change the time to a few frames ahead/behind the current frame, you'll see the new locator drift from the point.
* Select the 'scale_me' camera, scale it until the locator is back over the point you want to track. 
  Selecting scale xyz in the channel editor and middle-mouse dragging in the viewport is the best way to do this.
* Move the time-slider again, further from the original frame and scale the 'scale_me' node again - check first-frame/last frame. The locator should now be in the right world-space. 

The script can be run over and over and will clean up the scale_me cameras en-route and will re-use the first camera you selected.



The manual way:

* Look through a tracked camera with a back plate with the object you want to located in 3D space visible. 
* Create a locator and line it up through the cameras view (effectively in 2d) over the point in the image you want to line up.
* Select the camera and duplicate it. 
* This will delete the key frames for the duplicate so it will stay in the position the original camera. 
* Unlock the new camera's scale axes. 
* Group the locator under the duplicate camera.
* Scrub time a couple of frames, ensuring the object you want to track is still visible - the locator will drift off its point.
* Scale the duplicate camera, this moves the locator in Z space from the original matchmove camera's perspective - keep tweaking until the point lines up again.
* Change time again, scale the duplicate camera until the point lines up. 
* Check first and last frames line up. 


"""

import maya.cmds as cmds
import arnold
import pymel.core as pymel
import maya.mel as mel

def executeThis():
    
    def removeOldTracks():
        try:
            exists = []
            exists = cmds.select("pointInWorld")
            if exists < 0:
                print "Old trackers found, renaming."
                newName = "pointInWorldPlaced"
                renamedPoint = cmds.rename(exists, newName)
                if (cmds.listRelatives(renamedPoint, p=True) != None):
                    cmds.parent(renamedPoint, world=True)
        except:
            print "No old trackers found, moving on."
            pass     
    
    
    def removeLocatorPlacementCam():
        try:
            exists = []
            exists = cmds.select("scale_me")
            if exists < 0:
                print "Old scale_me nodes found, removing.",
                newName = "trackedScaler"
                #cmds.select("scale_me")
                cmds.rename(exists, newName)
                cmds.delete(newName)
        except:
            print "No old scalers found, moving on."
            pass
                
    def unlockAllAxes():
        nounicode=str(newcam[0]).split("'")
        camNoUnicode = "{}.".format(nounicode[0])
        axis = ['X', 'Y', 'Z']
        attrs = ['translate', 'rotate', 'scale']
        for ax in axis:
            for attr in attrs:
                cmds.setAttr(camNoUnicode+attr+ax, lock=0)
                    
    def moveParentPosition():                  
        # Move it to world-space and rename it
        if (cmds.listRelatives(newcam, p=True) != None):
            cmds.parent(newcam, world=True)	
        cmds.select( newcam, r=True )
        locatorParent = cmds.rename( 'scale_me' )
        # Create and parent a locator
        pointInWorld = cmds.spaceLocator(n="pointInWorld")
        cmds.parent(pointInWorld, locatorParent, relative=True)
        pointInWorld = str(pointInWorld[0]).split("'")
        pointInWorld = "{}.translateZ".format(pointInWorld[0])
        #position it
        locatorScale = 20    
        locatorDistance = -250
        cmds.setAttr(pointInWorld, locatorDistance)
        cmds.setAttr("pointInWorld.scaleX", locatorScale)
        cmds.setAttr("pointInWorld.scaleY", locatorScale)
        cmds.setAttr("pointInWorld.scaleZ", locatorScale) 
    
    def setupCamera():
        print "Camera selected: "+str(cam)
        camRelatives = cmds.listRelatives(cam)
        print camRelatives
        print cmds.nodeType(camRelatives) 
    
    
    newcam = []
    nounicode = []
    pointInWorld = []
    cam = []
    result = []
    firstCam = []
    
    # Select the camera & check it's a camera
    
    cam = cmds.ls(sl=True)
    if not cam:
        cmds.error( "Select the tracked camera." )
        
    
    # Checks it's not one of the permanent cameras
    
    permaCam = [u'top', u'front', u'side', u'persp', u'scale_me']
    result = [i for i in permaCam if cam[0] in i]
    
    if not result:
        print "Camera selected: "+str(cam)
        
        camRelatives = cmds.listRelatives(cam)
        print camRelatives
        print cmds.nodeType(camRelatives)
        
        for node in camRelatives:
            isCamera = []
            print node
            isCamera = cmds.nodeType(node)
            if isCamera == "camera":
                print "camera found: "+node, 
                firstCam = node 
                newcam = cmds.duplicate(cam, rr=True)  
            else:
                print "No camera selected ",
                if firstCam:
                    if cmds.nodeType(firstCam) == "camera":
                        print "Using camera from first time around"
                        cmds.select(firstCam)
                        newcam = cmds.duplicate(firstCam, rr=True)
                    pass  
                else:
                    break
            
            
            removeOldTracks()
            removeLocatorPlacementCam() 
            unlockAllAxes()
            moveParentPosition()
    
    else:
        if "scale_me" in result:
            print "Scale_me selected."
            print "Selecting original cam "+str(cam)
            cmds.select(firstCam)
            newcam = cmds.duplicate(firstCam, rr=True)
            
            camRelatives = cmds.listRelatives(firstCam)
            print camRelatives
            print cmds.nodeType(camRelatives)
            
            removeOldTracks()
            removeLocatorPlacementCam() 
            unlockAllAxes()
            moveParentPosition()
        print "Incorrect camera selected.",



# www.lookbothways.co.uk
# github.com/lookbothways/vfxTools
  



