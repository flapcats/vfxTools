## Select two groups containing locators and run script.
## This will generate one wire from each locator in
## Group 1 to a random locator in Group 2.

import maya.cmds as cmds
import random
from pymel.core import *

def genCurve(originalSelection,droopVal, randomVal):
    
    twoSelected = True
    list = cmds.ls(sl=True)
    if list != 2:
        twoSelected = False
        print "Only one locator selected, using first selected locator as source"
        list = originalSelection
    
    p1X = (cmds.getAttr(list[0]+".translateX"))
    p1Y = (cmds.getAttr(list[0]+".translateY"))
    p1Z = (cmds.getAttr(list[0]+".translateZ"))
    p2X = (cmds.getAttr(list[1]+".translateX"))
    p2Y = (cmds.getAttr(list[1]+".translateY"))
    p2Z = (cmds.getAttr(list[1]+".translateZ"))
    nCurve = cmds.curve( p=[(p1X, p1Y, p1Z),(p1X, p1Y, p1Z), (p2X, p2Y, p2Z), (p2X, p2Y, p2Z)] )
    cmds.rebuildCurve( rt=0, s=1 )
    cmds.select(nCurve+".cv[1:2]")

    amount = droopVal
    rndAmount = randomVal
    amount = (amount*-1.0)+((random.random()*rndAmount)*-1.0)
    cmds.move(0,amount,0,r=True,ls=True,wd=True)
    cmds.select(nCurve)
    setupArnoldCurves(nCurve)
    cmds.rebuildCurve( rt=0, s=3 )
    
    if twoSelected == False:
        cmds.select(list[-1])
    else:
        cmds.select(list)
    curves.append(nCurve)
      

        
                    
def queryTextField(originalSelection):
    # Gets the contents of the fiels in 'createWindow' 
    droopVal = cmds.textFieldGrp( 'droopVal', query = True, text = True)
    randomVal = cmds.textFieldGrp( 'randomVal', query = True, text = True)
    doit = 'OK'
    selectedThings = cmds.ls(sl=True)
    print selectedThings
    if selectedThings != 1:
        print "Creating wire.",
        genCurve(originalSelection,int(droopVal), int(randomVal))
    if selectedThings == 0:
        print "Nothing selected",
    else:
        print "Only one object selected",
    
 

def setupArnoldCurves(nCurve):
    try:
        cmds.setAttr(nCurve+".aiRenderCurve",1)
        cmds.setAttr(nCurve+".aiMode",1)
        cmds.setAttr(nCurve+".aiCurveWidth",0.02)
        #cmds.setAttr(nCurve+".aiMinPixelWidth",1)
    except:
        print "Curve not found",
        
        
def createWindow(originalSelection):
    
    windowID = 'Autowire'
    if cmds.window(windowID, exists = True):
        cmds.deleteUI('Autowire')
    window = cmds.window(windowID)
    cmds.rowColumnLayout()
     
    cmds.textFieldGrp('droopVal', label = 'Droop: ')
    cmds.textFieldGrp('randomVal', label = 'Random: ' )
    #cmds.button( label='Choose these values', command=('queryTextField();cmds.deleteUI(\"' + window + '\", window=True)') )
    """
    This button calls autoWire.queryTextField and therefore will have interesting issues if run from the script editor.
    Use this line if running from the script editor:
    cmds.button( label='Choose these values:', command=('queryTextField(originalSelection)') )   
    """
    cmds.button( label='Choose these values:', command=Callback(queryTextField, originalSelection)) 
    # The old way
    #cmds.button( label='Choose these values:', command=('autoWire.queryTextField(originalSelection)') )   
    cmds.showWindow( window )
    return values
    
def start():
    originalSelection = cmds.ls(sl=True) 
    values = createWindow(originalSelection)
    return originalSelection


#--------------------

def temp():
    # Source curve
    selectedSource = cmds.ls(sl=True)

    # Curves to get extruded along
    selected = cmds.ls(sl=True)
    for each in selected:
        cmds.extrude( selectedSource, each, et=2, fpt=True, ucp=1, upn=True )




nCurve = []
curves = []
values = ""
originalSelection = []
#
#originalSelection = start()















